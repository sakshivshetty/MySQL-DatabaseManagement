CREATE TABLE OUTLETS (
    OUTLET_ID INT NOT NULL PRIMARY KEY,
    UNIQUE(OUTLET_ID),
    OUTLET_ADDRESS VARCHAR(100) NOT NULL,
    EMAIL VARCHAR(50) NOT NULL,
    CONTACT VARCHAR(10) NOT NULL
);

CREATE TABLE DESIGNATION (
    DSGN_ID INT NOT NULL PRIMARY KEY,
    DSGN_NAME VARCHAR(15) NOT NULL,
    SALARY FLOAT NOT NULL
);

CREATE TABLE EMPLOYEES (
    EMP_ID INT NOT NULL PRIMARY KEY,
    UNIQUE(EMP_ID),
    EMP_NAME VARCHAR(25) NOT NULL,
    EMP_CONTACT VARCHAR(10) NOT NULL,
    GENDER CHARACTER(1),
    CHECK (GENDER='F' OR GENDER='M'), 
    AGE INT NOT NULL,
    CHECK (AGE>1 AND AGE<100),
    DSGN_ID INT NOT NULL,
    FOREIGN KEY (DSGN_ID) REFERENCES DESIGNATION(DSGN_ID),
    OUTLET_ID INT NOT NULL,
    FOREIGN KEY (OUTLET_ID) REFERENCES OUTLETS(OUTLET_ID)
);

CREATE TABLE CUSTOMERS (
    CUST_ID INT NOT NULL PRIMARY KEY,
    CUST_NAME VARCHAR(25) NOT NULL,
    CUST_CONTACT VARCHAR(10),
    EMAIL VARCHAR(50),
    GENDER CHARACTER(1),
    CHECK (GENDER='F' OR GENDER='M')
);

CREATE TABLE ORDERS (
    ORDER_ID INT NOT NULL PRIMARY KEY,
    CUST_ID INT NOT NULL,
    FOREIGN KEY (CUST_ID) REFERENCES CUSTOMERS(CUST_ID),
    EMP_ID INT NOT NULL,
    FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEES(EMP_ID),
    TIME_STAMP DATETIME
);

CREATE TABLE ITEMS (
    ITEM_ID INT NOT NULL PRIMARY KEY,
    ITEM_NAME VARCHAR(30) NOT NULL,
    GENDER CHARACTER(1),
    CHECK (GENDER='F' OR GENDER='M'),
    SIZE VARCHAR(4) NOT NULL,
    PRICE FLOAT NOT NULL
);

CREATE TABLE ORDER_DETAILS (
    ORDER_ID INT NOT NULL PRIMARY KEY,
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID),
    ITEM_ID INT NOT NULL,
    FOREIGN KEY (ITEM_ID) REFERENCES ITEMS(ITEM_ID)
);

CREATE TABLE BILLS (
    BILL_ID INT NOT NULL PRIMARY KEY,
    ORDER_ID INT NOT NULL,
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID),
    CASHIER_ID INT NOT NULL,
    FOREIGN KEY (CASHIER_ID) REFERENCES EMPLOYEES(EMP_ID),
    AMOUNT FLOAT,
    PAYMENT_TYPE VARCHAR(4),
    CHECK (PAYMENT_TYPE = 'CASH' OR PAYMENT_TYPE = 'CARD' OR PAYMENT_TYPE = 'UPI')
);

CREATE TABLE OFFERS (
    BILL_ID INT,
    ORDER_ID INT,
    --AMOUNT FLOAT,
    OFFER VARCHAR(25)
);
GO

CREATE TRIGGER OfferType ON BILLS
FOR INSERT
AS DECLARE @Bid INT, @Oid INT, @Offer VARCHAR(25);
SELECT @Bid = i.BILL_ID FROM INSERTED i WHERE i.AMOUNT>2500;
SELECT @Oid = i.ORDER_ID FROM INSERTED i WHERE i.AMOUNT>2500;
SET @Offer = 'Gift Voucher worth 1000 Rs';
--SELECT @Amt = i.AMOUNT FROM INSERTED i WHERE i.AMOUNT>2500;
INSERT INTO OFFERS(BILL_ID,ORDER_ID,OFFER) VALUES (@Bid,@Oid,@Offer);
PRINT 'AFTER INSERT trigger has been fired; offers have been updated accordingly.'
--GO
